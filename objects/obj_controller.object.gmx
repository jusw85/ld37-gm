<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//audio_master_gain(0);
randomize();

bg_text = "";
is_gameover = false;
intensity = 0;
failed_units = 0;

timer = 0;
num_seconds = 0;

damage = 0;
damage_ticks = 0;
damage_timer = 1 / 2;

heal_ticks = 0;
heal_timer = 1 / 6;

puzzle_active = false;
puzzle_ticks = 0;
initial_puzzle_timer = 3;
puzzle_timer = 8;
puzzle_timer_scale = 0.9;
puzzle_timer_scale_step = 0.0;

puzzles = ds_list_create();
var i;
for (i = 0; i &lt; instance_number(obj_puzzle); i++) {
    ds_list_add(puzzles, instance_find(obj_puzzle, i));
}
ds_list_shuffle(puzzles);

bgm = audio_play_sound(bgm_silent, 0, true);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// end condition
if (is_gameover) {
    exit;
}

if (damage &gt;= 192) {
    is_gameover = true;
    if (instance_exists(obj_popup)) {
        var i;
        for (i = 0; i &lt; instance_number(obj_popup); i++) {
            with (instance_find(obj_popup,i)) {
                instance_destroy();
            }
        }
    }
    var en = instance_create(640, 200, obj_end);
    en.num_seconds = num_seconds;
    view_xview[0] = 0;
    view_yview[0] = 0;
    audio_play_sound(snd_end, 0, false);
    audio_sound_pitch(bgm, 1);
}


// highscore timing
timer++;
num_seconds = floor(timer / room_speed);

// damage
damage_ticks += failed_units;
if (damage_ticks &gt;= damage_timer * room_speed) {
    damage_ticks = 0;
    damage++;
}

// heal
if (heal_ticks++ &gt;= heal_timer * room_speed) {
    heal_ticks = 0;
    damage--;
}

damage = clamp(damage, 0, 255);

// spawn puzzles
if (!puzzle_active) {
    if (puzzle_ticks++ &gt;= initial_puzzle_timer * room_speed) {
        puzzle_ticks = puzzle_timer * room_speed
        puzzle_active = true;
    }
} else {
    if (puzzle_ticks++ &gt;= puzzle_timer * room_speed) {
        puzzle_ticks = 0;
        puzzle_timer *= puzzle_timer_scale
        puzzle_timer_scale += puzzle_timer_scale_step;
        puzzle_timer_scale = clamp(puzzle_timer_scale, 0, 0.9);
        puzzle_timer = clamp(puzzle_timer, 2, 1000);
        var i;
        for (i = 0; i &lt; ds_list_size(puzzles); i++) {
            if (!puzzles[| i].active) {
                puzzles[| i].active = true;
                failed_units++;
                break;
            }
        }
        ds_list_shuffle(puzzles);
    }
}

// pitchup bgm
if (bgm != noone) {
    audio_sound_pitch(bgm, (damage / 255) + 1);
}

// screen shake
view_xview[0] = random_range(-intensity, intensity);
view_yview[0] = random_range(-intensity, intensity);
intensity = floor(damage / 16);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_sprite_ext(spr_bg, 0, 0, 0, 1, 1, 0, make_colour_rgb(255, 255 - damage, 255 - damage), 1);

draw_set_font(fnt_bg);
draw_set_colour(c_black);
draw_set_halign(fa_center);
draw_text(640, 200, string(num_seconds));

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>game_end();

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
